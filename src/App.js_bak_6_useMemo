import logo from './logo.svg';
import './App.css';
import { useMemo, useState } from 'react';

// useMemo => 메모라이제이션 react hooks, hooks전에는 클래스 컴포넌트로 사용

function App() {
  const [list, setList] = useState([1, 2, 3, 4]);
  const [str, setStr] = useState('합계');

  const getAddResult = () => {
    let sum = 0;
    list.forEach((i) => (sum = sum + i)); // return을 안해도 되어서 foreach로
    console.log('sum', sum);

    return sum;
  };

  //첫번째 들어가야하는 것 : 어떤 함수를 메모
  //두번째 들어가야하는 것 : dependency
  const addResult = useMemo(() => getAddResult(), [list]);

  return (
    <div>
      <button
        onClick={() => {
          setStr('안녕');
        }}
      >
        문자변경
      </button>
      <button
        on
        onClick={() => {
          setList([...list, 10]);
        }}
      >
        {' '}
        리스트 값 추가{' '}
      </button>
      <div>
        {list.map((i) => (
          <h1>{i}</h1>
        ))}
      </div>
      <div>
        {/*문자가(str) 변경될 때 계산을(getAddResult) 다시할 필요는 없다 useMemo를 써서 막을 수 있다. */}
        {/* {str} : {getAddResult()} 아래 메모라이징 된 addResult로 변경 하여 사용  */}
        {str} : {addResult}
      </div>
    </div>
  );
}

export default App;
